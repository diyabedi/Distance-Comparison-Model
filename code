import networkx as nx
import matplotlib.pyplot as plt
import googlemaps
#Creating a graph 
def build_graph():
    """Builds a sample graph with nodes and weighted edges"""
    graph= nx.Graph()
    graph.add_edge('A','B',weight=4)
    graph.add_edge('A','C',weight=2)
    graph.add_edge('B','C',weight=1)
    graph.add_edge('B','D',weight=5)
    graph.add_edge('C','D',weight=8)
    return graph

#User input for start and end locations
def get_user_input():
    try:
        start=input("Enter the start location (e.g., A): ").strip()
        end=input("Enter the end location (e.g., D): ").strip()
        return start,end
    except Exception as e:
        print(f"Error in input: {e}")
        return None, None

def calculate_shortest_path(graph, start, end):
    """Calculates the shortest path and distance using Dijkstra's Algorithm"""
    try:
        shortest_path=nx.shortest_path(graph, source=start, target=end, weight='weight')
        shortest_distance=nx.shortest_path_length(graph, source=start, target=end, weight='weight')
        return shortest_path, shortest_distance
    except nx.NetworkXNoPath:
        print("Error: No path exists between the given nodes.")
    except nx.NodeNotFound as e:
        print(f"Error: {e}")
    return None, None

def visualize_graph(graph,shortest_path): 
    """visualizes the graph and highlights the shortest path"""
    try:
        pos=nx.spring_layout(graph) #Layout for Nodes
        nx.draw(graph, pos, with_labels=True, node_color='lightblue',edge_color='gray',node_size=3000, font_size=15)
        #Highlighting the shortest path using below:
        if shortest_path:
            shortest_edges=[(shortest_path[i], shortest_path[i+1]) for i in range(len(shortest_path)-1)]
            nx.draw_networkx_edges(graph, pos, edgelist=shortest_edges, edge_color='red', width=2.5)
            
        plt.show()
    except Exception as e:
        print(f"Error in Visualization: {e}")
        
def get_distance_GM(api_key, orgin, destination):
    """Fetches the distance between two locations from Google Maps API"""
    try:
        gmaps=googlemaps.Client(key=api_key)
        distance_info =gmaps.distance_matrix(origin, destination, mode="driving")
        google_distance = distance_info["rows"][0]["elements"][0]["distance"]["value"]/1000 #in km
        return google_distance
    except Exception as e:
        print(f"Error in fetching Google Maps distance: {e}")
        return None
def calculate_accuracy(shortest_distance, google_distance):
    """Calculates the accuracy of the algorithm compared to Google Maps"""
    try:
        accuracy=(1-abs(google_distance - shortest_distance)/google_distance)*100
        return accuracy
    except Exception as e:
        print(f"Error in calculating accuracy: {e}")
        return None
    
def main():
    """Main function to run the program."""
    #step 1: building the graph here
    graph=build_graph() 
    #step 2: get user input data for start and end
    start, end = get_user_input()
    if not start or not end:
        print("Invalid input. Existing program.")
        return
    #step 3: calculate shortest path using DJ Algorithm
    shortest_path, shortest_distance = calculate_shortest_path(graph, start, end)
    if shortest_path is None or shortest_distance is None:
        return
    print(f"Shortest path : {shortest_path}")
    print(f"Shortest distance: {shortest_distance} km")
    
    #step 4: visualize the graph and shortest path
    visualize_graph(graph, shortest_path)
    
    #step 5: Fetch distance from google maps
    api_key = "YOUR_GOOGLE_API_KEY" #REPLACE IT WITH ACTUAL API
    origin = input("Enter Origin (eg: New York, NY :")
    destination= input("Enter destination (eg: Boston, MA :")
    google_distance = get_distance_GM(api_key, origin, destination)
    if google_distance is None:
        return
    
    print(f"Google Maps Distance : {google_distance} km")
    
    #step 6: calculate and display accuracy
    accuracy = calculate_accuracy(shortest_distance, google_distance)
    if accuracy is not None:
        print(f"Accuracy comapred to Google Maps : {accuracy:.2f}%")

if __name__ == "__main__":
    main()
